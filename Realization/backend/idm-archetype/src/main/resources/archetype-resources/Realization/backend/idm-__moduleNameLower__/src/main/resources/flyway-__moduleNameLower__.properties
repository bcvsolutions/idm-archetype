#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound} ${moduleName} module Flyway configuration
${symbol_pound}
${symbol_pound} Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table. 
${symbol_pound} This schema will then be baselined with the baselineVersion before executing the migrations. 
${symbol_pound} Only migrations above baselineVersion will then be applied.
${symbol_pound} This is useful for initial Flyway production deployments on projects with an existing DB.
${symbol_pound} Be careful when enabling this as it removes the safety net that ensures Flyway does not migrate the wrong database in case of a configuration mistake!
flyway.${moduleName.toLowerCase()}.baselineOnMigrate=true
${symbol_pound}
${symbol_pound} The name of Flyway's metadata table (default **schema_version**).
${symbol_pound} By default (single-schema mode) the metadata table is placed in the default schema for the connection provided by the datasource.
flyway.${moduleName.toLowerCase()}.table=idm_schema_version_${moduleName.toLowerCase()}
${symbol_pound}
${symbol_pound} Comma-separated list of locations to scan recursively for migrations. The location type is determined by its prefix.
${symbol_pound} Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain both sql and java-based migrations.
${symbol_pound} Locations starting with filesystem: point to a directory on the filesystem and may only contain sql migrations. 
${symbol_pound} IdmFlywayMigrationStrategy resolves used jdbc database dynamically - ${symbol_dollar}{dbName} in location could be used.
flyway.${moduleName.toLowerCase()}.locations=classpath:${packageInPathFormat}/${moduleName.toLowerCase()}/sql/${symbol_dollar}{dbName}
